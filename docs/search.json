[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Characterization of the Australian Financial Assistance Grants System",
    "section": "",
    "text": "Preface\nThis is a repository - a knowledge base if you will, of the Financial Assistance Grants system to Local Government Councils.\nIn the first section of the book, we explore the different methods employed by state grants commissions to determine the quantum of the grant allocaiton.\nThe second section then explores issues commonly reported by councils. We also explore debates surrounding optimal grant allocation strategies.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  An introduction to the FA Grants System",
    "section": "",
    "text": "1.1 An introduction to FA Grants Financial Assistance Grants (FA Grants) are a funding mechanism used by the Commonwealth government to distribute funding to Australia’s 538 local councils. Every year, the federal government allocates a pull of money to be distributed to councils nation wide. FA Grants are untied, meaning that councils spend money from the FA Grant program autonomously.\nFA Grants are essential to local government, providing critical funding that supports the delivery of community services, infrastructure, and local development projects. Without these grants, many councils - particularly those in regional and rural areas - would struggle to maintain the service levels expected by their communities.\n1.2 Allocation of FA Grants\nFA Grants are allocated according to the “Local Government (Financial Assistance) Act” (1995). The FA Grant distribution process consists of three components: a local road network component; a general purpose component; and a per capita minimum grant component. This final component requires every council to be given at least 30% of what their grant would be if distributed on a purely per capita basis.\nWhilst the Commonwealth is responsible for providing FA Grants, it is state government appointed grant commissions which decide how FA Grant money will be distributed, and the more intricate details of the general purpose and roads components. This means councils are assessed differently depending on their state jurisdiction.\nThe federal government directs states to allocate FA grants based on two principles: horizontal equilisation and effort neutrality. Horizontal equilisation refers to allocating funds in a way that takes into consideration the differing revenue raising capacities of councils, and effort neutrality directs grant commissions not to punish councils for political or accounting decisions.\n1.3 FA Grants as they stand today\nFunding for the FA grant program has evolved since its initial introduction, and the program has not kept up with the expanding role that local councils play. Over the past 30 years, FA grants have been cut from equaling 1% of Commonwealth taxation revenue in 1996, to the present day, where they are worth 0.5% of Commonwealth taxation revenue.\nThis decline in real value has been due to a number of factors; including the pausing of the program’s indexing between 2014 and 2017.\nThe requirement for each council to receive at least 30% of a per capita equivelant grant program is controversial with our members (Australia’s 538 local governments). Regional and rural councils see it as a way to funnel money towards urban and peri-urban councils, even though they are not as financially reliant on FA grants as their regional and rural counterparts. This is an understandable perspective, given inner city councils often run in surplus, with a wide range of revenue streams due to high economic activity and a more dense populus.\nALGA holds a long standing view that a more practical way to achieve greater financial sustainability for councils is to increase the size of the pie rather than how it is sliced. This is reflected in ALGA’s call for a return to FA Grants being equal to 1% of Commonwealth taxation revenue.\nWe have also long suspected that the removal of the 30% minimum allocation would not achieve significant enough stability to regional and rural councils.\nIn this report, we break from this view to consider the impacts of a change to the minimum allocation. We achieve this through modelling the per capita gains and losses of a shift from 30%, considering a lower requirement; and the removal of a minimum allocation in its entirety.\nBuilding off this analysis, we will also perform a macroeconomic modelling of how these changes could impact the broader economy.\nThe goal of this analysis is to provide insights into what type of change to the distribution process would optimise the financial sustainability of local governments, whilst also improving the productivity of the broader economy.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>An introduction to the FA Grants System</span>"
    ]
  },
  {
    "objectID": "jurisdictional_approaches.html",
    "href": "jurisdictional_approaches.html",
    "title": "4  Jurisdictional Approaches",
    "section": "",
    "text": "4.1 New South Wales",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Jurisdictional Approaches</span>"
    ]
  },
  {
    "objectID": "jurisdictional_approaches.html#victoria",
    "href": "jurisdictional_approaches.html#victoria",
    "title": "4  Jurisdictional Approaches",
    "section": "4.2 Victoria",
    "text": "4.2 Victoria\n(Commission 2024)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Jurisdictional Approaches</span>"
    ]
  },
  {
    "objectID": "jurisdictional_approaches.html#queensland",
    "href": "jurisdictional_approaches.html#queensland",
    "title": "4  Jurisdictional Approaches",
    "section": "4.3 Queensland",
    "text": "4.3 Queensland",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Jurisdictional Approaches</span>"
    ]
  },
  {
    "objectID": "jurisdictional_approaches.html#south-australia",
    "href": "jurisdictional_approaches.html#south-australia",
    "title": "4  Jurisdictional Approaches",
    "section": "4.4 South Australia",
    "text": "4.4 South Australia",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Jurisdictional Approaches</span>"
    ]
  },
  {
    "objectID": "jurisdictional_approaches.html#western-australia",
    "href": "jurisdictional_approaches.html#western-australia",
    "title": "4  Jurisdictional Approaches",
    "section": "4.5 Western Australia",
    "text": "4.5 Western Australia",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Jurisdictional Approaches</span>"
    ]
  },
  {
    "objectID": "jurisdictional_approaches.html#tasmania",
    "href": "jurisdictional_approaches.html#tasmania",
    "title": "4  Jurisdictional Approaches",
    "section": "4.6 Tasmania",
    "text": "4.6 Tasmania",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Jurisdictional Approaches</span>"
    ]
  },
  {
    "objectID": "jurisdictional_approaches.html#northern-territory",
    "href": "jurisdictional_approaches.html#northern-territory",
    "title": "4  Jurisdictional Approaches",
    "section": "4.7 Northern Territory",
    "text": "4.7 Northern Territory",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Jurisdictional Approaches</span>"
    ]
  },
  {
    "objectID": "jurisdictional_approaches.html#australian-capital-territory",
    "href": "jurisdictional_approaches.html#australian-capital-territory",
    "title": "4  Jurisdictional Approaches",
    "section": "4.8 Australian Capital Territory",
    "text": "4.8 Australian Capital Territory\n\n\n\n\n\n\nCommission VG (2024) “Financial Assistance Grants,” Local Government.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Jurisdictional Approaches</span>"
    ]
  },
  {
    "objectID": "discussed_issues.html",
    "href": "discussed_issues.html",
    "title": "5  Discussed Issues",
    "section": "",
    "text": "This is the content for # Discussed Issues.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Discussed Issues</span>"
    ]
  },
  {
    "objectID": "simulation_methodology.html",
    "href": "simulation_methodology.html",
    "title": "Appendix A — Methodology: Grants Simulation",
    "section": "",
    "text": "A.1 Controls and constants\nThis notebook simulates the allocation of Financial Assistance Grants to Australian states and territories.\nFor each region, the specific methodology is explained in markdown cells following the code implementation.\nAt a high level, we use whatever information we have out there to construct a profile of need in 2024-25 for each council.\nThen, for the subsequent years, we sample movement of that need from a normal distribution centred at 1, with a standard deviation of 0.1 - essentially, a council can be expected to experience a change between -20% and +20% about 95% of the time.\nA reduction in the gap implies improved financial sustainability.\nFor each year that follows, fund allocation methodology is implemented for each state based on that state’s Grant Commission’s methodology.\nThis process is repeated 1000 times for each council to capture as much of the variability as possible.\nShow the code\nper_capita_minimum = 0.17\nper_capita_minimum_base = 0.3\nShow the code\npop_30_jun = pd.read_excel(\n    \"./Data/FA Grants Tables - Python.xlsx\",\n    sheet_name=\"Population\",\n    skiprows=9,\n    nrows=7,\n)\n\npop_30_jun.set_index(\"Population by state, at 30 June (million)\", inplace=True)\n\npop_30_jun = pop_30_jun * 1e6\nShow the code\nbudget_grants = pd.read_excel(\n    \"./Data/FA Grants Tables - Python.xlsx\", sheet_name=\"Grants\"\n)\n\nbudget_grants.bfill(inplace=True)\n\nbudget_grants.set_index(\"Financial Assistance Grant program (million)\", inplace=True)\n\nbudget_grants = budget_grants.loc[[\"2025-26\", \"2026-27\", \"2027-28\", \"2028-29\"]]\n\nbudget_grants = budget_grants * 1e6\nWe first define two per_capita_minimum parameters for the simulation - one as the scenario under study and the other as a benchmark.\nThen, we grab projected values for FA Grants and the Estimated Resident Population in June from the budget papers. The June ERP was chosen as a metric over methodology specific ERP values (some states use population data from up to 5 years before the allocation year in their allocation methodology) simply to standardize the variable and make the model easy to maintain.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Methodology: Grants Simulation</span>"
    ]
  },
  {
    "objectID": "simulation_methodology.html#states-with-data-constraints",
    "href": "simulation_methodology.html#states-with-data-constraints",
    "title": "Appendix A — Methodology: Grants Simulation",
    "section": "A.2 States with data constraints",
    "text": "A.2 States with data constraints\nQueensland and New South Wales do not release their “Funding Gap” variables. Hence, an analogue is reverse engineered from the gap between grant entitlement and minimum grant. Adjustments and normalizations applied to this should, in principle, give fairly robust numbers, especially at the high level.\nGiven the lack of published data, a synthetic metric of need - the scaled gap, for a council i in a state S is defined as\n\\[\n    Gap_i = \\frac{General\\ Purpose\\ Grant_{i} - Minimum\\ Allocation_{i, per\\ capita\\ basis}}{Total\\ General\\ Purpose\\ Grant_{S} - Total\\ Per\\ Capita\\ Allocation_{S}}\n\\]\n\nA.2.1 New South Wales\n\n\nShow the code\nnsw_grants_base = pd.read_excel(\n    \"./Data/FA Grants Tables - Python.xlsx\", sheet_name=\"New South Wales\"\n)\n\nnsw_grants_base[\"ERP_2025\"] = (\n    nsw_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"NSW\"][2025]\n    / nsw_grants_base[\"ERP_2024\"].sum()\n)\nnsw_grants_base[\"ERP_2025\"] = nsw_grants_base[\"ERP_2025\"].round(0)\n\nnsw_grants_base[\"ERP_2026\"] = (\n    nsw_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"NSW\"][2026]\n    / nsw_grants_base[\"ERP_2024\"].sum()\n)\nnsw_grants_base[\"ERP_2026\"] = nsw_grants_base[\"ERP_2026\"].round(0)\n\nnsw_grants_base[\"ERP_2027\"] = (\n    nsw_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"NSW\"][2027]\n    / nsw_grants_base[\"ERP_2024\"].sum()\n)\nnsw_grants_base[\"ERP_2027\"] = nsw_grants_base[\"ERP_2027\"].round(0)\n\nnsw_grants_base[\"ERP_2028\"] = (\n    nsw_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"NSW\"][2028]\n    / nsw_grants_base[\"ERP_2024\"].sum()\n)\nnsw_grants_base[\"ERP_2028\"] = nsw_grants_base[\"ERP_2028\"].round(0)\n\nnew_south_wales_master_sim = pd.DataFrame()\n\nfor i in range(1000):\n    nsw_grants = nsw_grants_base.copy()\n\n    nsw_grants[\"UID\"] = nsw_grants[\"LGA\"].str.replace(\" \", \"\").replace(\"-\", \"\") + str(\n        i + 1\n    )\n\n    for year in range(2025, 2027):\n        prev_year = year - 1\n\n        min_per_capita_grant = (\n            budget_grants[\"NSW\"][f\"{year}-{(year+1)%1000}\"]\n            / nsw_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum\n        )\n\n        min_grant = nsw_grants[f\"ERP_{year}\"] * min_per_capita_grant\n\n        min_per_capita_grant_base = (\n            budget_grants[\"NSW\"][f\"{year}-{(year+1)%1000}\"]\n            / nsw_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum_base\n        )\n\n        min_grant_base = nsw_grants[f\"ERP_{year}\"] * min_per_capita_grant_base\n\n        non_min = nsw_grants[f\"Scaled Gap_{year-1}\"].round(4) == 0.0\n\n        nsw_grants[f\"Scaled Gap_{year}\"] = nsw_grants[\n            f\"Scaled Gap_{year-1}\"\n        ] * np.random.normal(\n            1, 0.1, size=nsw_grants.shape[0]\n        )  # * non_min\n        nsw_grants[f\"Scaled Gap_{year}\"] = (\n            nsw_grants[f\"Scaled Gap_{year}\"] / nsw_grants[f\"Scaled Gap_{year}\"].sum()\n        )\n\n        # New case\n\n        raw_alloc = nsw_grants[f\"Scaled Gap_{year}\"] * (\n            budget_grants[\"NSW\"][f\"{year}-{(year+1)%1000}\"] - min_grant.sum()\n        )\n\n        nsw_grants[f\"Grant_{year}\"] = min_grant + raw_alloc\n\n        # Base case\n\n        raw_alloc = nsw_grants[f\"Scaled Gap_{year}\"] * (\n            budget_grants[\"NSW\"][f\"{year}-{(year+1)%1000}\"] - min_grant_base.sum()\n        )\n\n        nsw_grants[f\"Grant_base_{year}\"] = min_grant_base + raw_alloc\n\n    new_south_wales_master_sim = pd.concat([new_south_wales_master_sim, nsw_grants])\n\n\nNo explicit cap or collar has been defined.\n\n\nA.2.2 Queensland\n\n\nShow the code\nqld_grants_base = pd.read_excel(\n    \"./Data/FA Grants Tables - Python.xlsx\", sheet_name=\"Queensland\"\n)\n\nqld_grants_base[\"ERP_2025\"] = (\n    qld_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"QLD\"][2025]\n    / qld_grants_base[\"ERP_2024\"].sum()\n)\nqld_grants_base[\"ERP_2025\"] = qld_grants_base[\"ERP_2025\"].round(0)\n\nqld_grants_base[\"ERP_2026\"] = (\n    qld_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"QLD\"][2026]\n    / qld_grants_base[\"ERP_2024\"].sum()\n)\nqld_grants_base[\"ERP_2026\"] = qld_grants_base[\"ERP_2026\"].round(0)\n\nqld_grants_base[\"ERP_2027\"] = (\n    qld_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"QLD\"][2027]\n    / qld_grants_base[\"ERP_2024\"].sum()\n)\nqld_grants_base[\"ERP_2027\"] = qld_grants_base[\"ERP_2027\"].round(0)\n\nqld_grants_base[\"ERP_2028\"] = (\n    qld_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"QLD\"][2028]\n    / qld_grants_base[\"ERP_2024\"].sum()\n)\nqld_grants_base[\"ERP_2028\"] = qld_grants_base[\"ERP_2028\"].round(0)\n\nqueensland_master_sim = pd.DataFrame()\n\nfor i in range(1000):\n    qld_grants = qld_grants_base.copy()\n\n    qld_grants[\"UID\"] = qld_grants[\"LGA\"].str.replace(\" \", \"\").replace(\"-\", \"\") + str(\n        i + 1\n    )\n\n    for year in range(2025, 2029):\n        prev_year = year - 1\n\n        min_per_capita_grant = (\n            budget_grants[\"QLD\"][f\"{year}-{(year+1)%1000}\"]\n            / qld_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum\n        )\n\n        min_grant = qld_grants[f\"ERP_{year}\"] * min_per_capita_grant\n\n        min_per_capita_grant_base = (\n            budget_grants[\"QLD\"][f\"{year}-{(year+1)%1000}\"]\n            / qld_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum_base\n        )\n\n        min_grant_base = qld_grants[f\"ERP_{year}\"] * min_per_capita_grant_base\n\n        non_min = qld_grants[f\"ERP_{year}\"] &lt;= 80000\n\n        qld_grants[f\"Scaled Gap_{year}\"] = (\n            qld_grants[f\"Scaled Gap_{year-1}\"]\n            * np.random.normal(1, 0.1, size=qld_grants.shape[0])\n        ) * non_min\n        qld_grants[f\"Scaled Gap_{year}\"] = (\n            qld_grants[f\"Scaled Gap_{year}\"] / qld_grants[f\"Scaled Gap_{year}\"].sum()\n        )\n\n        # New case\n\n        raw_alloc = qld_grants[f\"Scaled Gap_{year}\"] * (\n            budget_grants[\"QLD\"][f\"{year}-{(year+1)%1000}\"] - min_grant.sum()\n        )\n\n        qld_grants[f\"Grant_{year}\"] = min_grant + raw_alloc\n\n        # Base case\n\n        raw_alloc = qld_grants[f\"Scaled Gap_{year}\"] * (\n            budget_grants[\"QLD\"][f\"{year}-{(year+1)%1000}\"] - min_grant_base.sum()\n        )\n\n        qld_grants[f\"Grant_base_{year}\"] = min_grant_base + raw_alloc\n\n    queensland_master_sim = pd.concat([queensland_master_sim, qld_grants])\n\n\nThere’s no cap/collar and minimum grant eligibility is based on population &gt; 80,000.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Methodology: Grants Simulation</span>"
    ]
  },
  {
    "objectID": "simulation_methodology.html#states-with-workable-data",
    "href": "simulation_methodology.html#states-with-workable-data",
    "title": "Appendix A — Methodology: Grants Simulation",
    "section": "A.3 States with workable data",
    "text": "A.3 States with workable data\nFor these states, a simple algorithm for allocation is defined.\n\nA raw allocation based on funding gap is made, respectful of minimum grant requirements.\nThis raw allocation is compared to funding from the previous year to determine the magnitude of movement.\nAn iterative process is used to reallocate funds away from “overfunded” (as defined by movement) councils.\nThe redistribution loop is run either until\n\nall councils see movement within the defined caps and collars\nthere’s no change in the distribution over iterations.\n\n\n\nFor Victoria, South Australia, and Tasmania a constraint has been placed on the number of iterations run. For the first 100 iterations, both upper and lower limits are enforced. After that, only the lower limits are explicitly enforced.\n\n\nA.3.1 Victoria\n\n\nShow the code\ndef correct_delta_vic(sub_vic, year, base=False):\n\n    total_funding_gap = (sub_vic[f\"Funding Gap_{year}\"] * sub_vic[\"deficit\"]).sum()\n    total_funding = sub_vic[\"alloc\"].sum()\n\n    comparison_column = \"Grant_base_\" if base else \"Grant_\"\n\n    while np.any((sub_vic[\"delta\"].round(2) &lt; 2) | (sub_vic[\"delta\"].round(2) &gt; 10)):\n        sub_vic[\"g\"] = sub_vic[\"delta\"].apply(\n            lambda x: (x - 2) / 100 if x &lt; 2 else ((x - 10) / 100 if x &gt; 10 else 0)\n        )\n\n        sub_vic[\"alloc\"] -= sub_vic[\"g\"] * sub_vic[f\"{comparison_column}{year-1}\"]\n\n        remainder = total_funding - sub_vic[\"alloc\"].sum()\n\n        sub_vic[\"alloc\"] += (\n            sub_vic[f\"Funding Gap_{year}\"] * remainder / total_funding_gap\n        )\n\n        sub_vic[\"delta\"] = (\n            (sub_vic[\"alloc\"] - sub_vic[f\"{comparison_column}{year-1}\"])\n            / sub_vic[f\"{comparison_column}{year-1}\"]\n            * 100\n        )\n    return sub_vic\n\n\n\n\nShow the code\nvic_grants_base = pd.read_excel(\n    \"./Data/FA Grants Tables - Python.xlsx\", sheet_name=\"Victoria\"\n)\n\nvic_grants_base[\"ERP_2025\"] = (\n    vic_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"VIC\"][2025]\n    / vic_grants_base[\"ERP_2024\"].sum()\n)\nvic_grants_base[\"ERP_2025\"] = vic_grants_base[\"ERP_2025\"].round(0)\n\nvic_grants_base[\"ERP_2026\"] = (\n    vic_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"VIC\"][2026]\n    / vic_grants_base[\"ERP_2024\"].sum()\n)\nvic_grants_base[\"ERP_2026\"] = vic_grants_base[\"ERP_2026\"].round(0)\n\nvic_grants_base[\"ERP_2027\"] = (\n    vic_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"VIC\"][2027]\n    / vic_grants_base[\"ERP_2024\"].sum()\n)\nvic_grants_base[\"ERP_2027\"] = vic_grants_base[\"ERP_2027\"].round(0)\n\nvic_grants_base[\"ERP_2028\"] = (\n    vic_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"VIC\"][2028]\n    / vic_grants_base[\"ERP_2024\"].sum()\n)\nvic_grants_base[\"ERP_2028\"] = vic_grants_base[\"ERP_2028\"].round(0)\n\nvic_grants_base[\"Grant_base_2024\"] = vic_grants_base[\"Grant_2024\"]\n\nvictoria_master_sim = pd.DataFrame()\n\nfor i in range(1000):\n\n    vic_grants = vic_grants_base.copy()\n\n    vic_grants[\"UID\"] = vic_grants[\"LGA\"].str.replace(\" \", \"\").replace(\"-\", \"\") + str(\n        i + 1\n    )\n\n    for year in range(2025, 2029):\n\n        prev_year = year - 1\n\n        min_per_capita_grant = (\n            budget_grants[\"VIC\"][f\"{year}-{(year+1)%1000}\"]\n            / vic_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum\n        )\n\n        min_grant = vic_grants[f\"ERP_{year}\"] * min_per_capita_grant\n\n        min_per_capita_grant_base = (\n            budget_grants[\"VIC\"][f\"{year}-{(year+1)%1000}\"]\n            / vic_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum_base\n        )\n\n        min_grant_base = vic_grants[f\"ERP_{year}\"] * min_per_capita_grant_base\n\n        vic_grants[f\"Funding Gap_{year}\"] = vic_grants[\n            f\"Funding Gap_{year-1}\"\n        ] * np.random.normal(1, 0.1, size=vic_grants.shape[0])\n\n        vic_grants[\"deficit\"] = vic_grants[f\"Funding Gap_{year}\"] &gt; 0\n\n        total_deficit = (\n            vic_grants[f\"Funding Gap_{year}\"] * vic_grants[\"deficit\"]\n        ).sum()\n\n        # New case\n\n        raw_alloc = (\n            vic_grants[f\"Funding Gap_{year}\"] * vic_grants[\"deficit\"] / total_deficit\n        ) * (budget_grants[\"VIC\"][f\"{year}-{(year+1)%1000}\"] - min_grant.sum())\n\n        vic_grants[\"alloc\"] = min_grant + raw_alloc\n\n        vic_grants[\"delta\"] = (\n            (vic_grants[\"alloc\"] - vic_grants[f\"Grant_{year-1}\"])\n            / vic_grants[f\"Grant_{year-1}\"]\n            * 100\n        )\n\n        non_min_vic = vic_grants[\n            vic_grants[\"deficit\"]\n        ]  # [[\"LGA\", f\"Funding Gap_{year}\", f\"grant_{year-1}\", \"alloc\"]]\n\n        vic_grants.combine_first(correct_delta_vic(non_min_vic, year))\n\n        vic_grants[f\"Grant_{year}\"] = vic_grants[\"alloc\"]\n\n        # Base case\n\n        raw_alloc = (\n            vic_grants[f\"Funding Gap_{year}\"] * vic_grants[\"deficit\"] / total_deficit\n        ) * (budget_grants[\"VIC\"][f\"{year}-{(year+1)%1000}\"] - min_grant_base.sum())\n\n        vic_grants[\"alloc\"] = min_grant_base + raw_alloc\n\n        vic_grants[\"delta\"] = (\n            (vic_grants[\"alloc\"] - vic_grants[f\"Grant_base_{year-1}\"])\n            / vic_grants[f\"Grant_base_{year-1}\"]\n            * 100\n        )\n\n        non_min_vic = vic_grants[\n            vic_grants[\"deficit\"]\n        ]  # [[\"LGA\", f\"Funding Gap_{year}\", f\"grant_{year-1}\", \"alloc\"]]\n\n        vic_grants.combine_first(correct_delta_vic(non_min_vic, year, base=True))\n\n        vic_grants[f\"Grant_base_{year}\"] = vic_grants[\"alloc\"]\n\n    victoria_master_sim = pd.concat([victoria_master_sim, vic_grants])\n\n\nVictorial uses a cap/collar of [2%, 10%] for councils.\n\n\nA.3.2 South Australia\n\n\nShow the code\ndef correct_delta_sa(sub_sa, year, base=False):\n\n    total_funding_gap = (sub_sa[f\"Funding Gap_{year}\"] * sub_sa[\"deficit\"]).sum()\n    total_funding = sub_sa[\"alloc\"].sum()\n\n    comparison_column = \"Grant_base_\" if base else \"Grant_\"\n\n    while np.any((sub_sa[\"delta\"].round(2) &lt; -15) | (sub_sa[\"delta\"].round(2) &gt; 30)):\n        sub_sa[\"g\"] = sub_sa[\"delta\"].apply(\n            lambda x: (\n                (x - (-15)) / 100 if x &lt; -15 else ((x - 30) / 100 if x &gt; 30 else 0)\n            )\n        )\n\n        sub_sa[\"alloc\"] -= sub_sa[\"g\"] * sub_sa[f\"{comparison_column}{year-1}\"]\n\n        remainder = total_funding - sub_sa[\"alloc\"].sum()\n\n        sub_sa[\"alloc\"] += sub_sa[f\"Funding Gap_{year}\"] * remainder / total_funding_gap\n\n        sub_sa[\"delta\"] = (\n            (sub_sa[\"alloc\"] - sub_sa[f\"{comparison_column}{year-1}\"])\n            / sub_sa[f\"{comparison_column}{year-1}\"]\n            * 100\n        )\n    return sub_sa\n\n\n\n\nShow the code\nsa_grants_base = pd.read_excel(\n    \"./Data/FA Grants Tables - Python.xlsx\", sheet_name=\"South Australia\"\n)\n\nsa_grants_base[\"ERP_2025\"] = (\n    sa_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"SA\"][2025]\n    / sa_grants_base[\"ERP_2024\"].sum()\n)\nsa_grants_base[\"ERP_2025\"] = sa_grants_base[\"ERP_2025\"].round(0)\n\nsa_grants_base[\"ERP_2026\"] = (\n    sa_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"SA\"][2026]\n    / sa_grants_base[\"ERP_2024\"].sum()\n)\nsa_grants_base[\"ERP_2026\"] = sa_grants_base[\"ERP_2026\"].round(0)\n\nsa_grants_base[\"ERP_2027\"] = (\n    sa_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"SA\"][2027]\n    / sa_grants_base[\"ERP_2024\"].sum()\n)\nsa_grants_base[\"ERP_2027\"] = sa_grants_base[\"ERP_2027\"].round(0)\n\nsa_grants_base[\"ERP_2028\"] = (\n    sa_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"SA\"][2028]\n    / sa_grants_base[\"ERP_2024\"].sum()\n)\nsa_grants_base[\"ERP_2028\"] = sa_grants_base[\"ERP_2028\"].round(0)\n\nsa_grants_base[\"Grant_base_2024\"] = sa_grants_base[\"Grant_2024\"]\n\nsouth_australia_master_sim = pd.DataFrame()\n\nfor i in range(1000):\n    sa_grants = sa_grants_base.copy()\n\n    sa_grants[\"UID\"] = sa_grants[\"LGA\"].str.replace(\" \", \"\").replace(\"-\", \"\") + str(\n        i + 1\n    )\n\n    for year in range(2025, 2029):\n        prev_year = year - 1\n\n        min_per_capita_grant = (\n            budget_grants[\"SA\"][f\"{year}-{(year+1)%1000}\"]\n            / sa_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum\n        )\n\n        min_grant = sa_grants[f\"ERP_{year}\"] * min_per_capita_grant\n\n        min_per_capita_grant_base = (\n            budget_grants[\"SA\"][f\"{year}-{(year+1)%1000}\"]\n            / sa_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum_base\n        )\n\n        min_grant_base = sa_grants[f\"ERP_{year}\"] * min_per_capita_grant_base\n\n        sa_grants[f\"Funding Gap_{year}\"] = sa_grants[\n            f\"Funding Gap_{year-1}\"\n        ] * np.random.normal(1, 0.1, size=sa_grants.shape[0])\n\n        sa_grants[\"deficit\"] = sa_grants[f\"Funding Gap_{year}\"] &gt; 0\n\n        total_deficit = (sa_grants[f\"Funding Gap_{year}\"] * sa_grants[\"deficit\"]).sum()\n\n        # New case\n\n        raw_alloc = (\n            sa_grants[f\"Funding Gap_{year}\"] * sa_grants[\"deficit\"] / total_deficit\n        ) * (budget_grants[\"SA\"][f\"{year}-{(year+1)%1000}\"] - min_grant.sum())\n\n        sa_grants[\"alloc\"] = min_grant + raw_alloc\n\n        sa_grants[\"delta\"] = (\n            (sa_grants[\"alloc\"] - sa_grants[f\"Grant_{year-1}\"])\n            / sa_grants[f\"Grant_{year-1}\"]\n            * 100\n        )\n\n        non_min_sa = sa_grants[\n            sa_grants[\"deficit\"]\n        ]  # [[\"LGA\", f\"Funding Gap_{year}\", f\"grant_{year-1}\", \"alloc\"]]\n\n        sa_grants.combine_first(correct_delta_sa(non_min_sa, year))\n\n        sa_grants[f\"Grant_{year}\"] = sa_grants[\"alloc\"]\n\n        # Base case\n\n        raw_alloc = (\n            sa_grants[f\"Funding Gap_{year}\"] * sa_grants[\"deficit\"] / total_deficit\n        ) * (budget_grants[\"SA\"][f\"{year}-{(year+1)%1000}\"] - min_grant_base.sum())\n\n        sa_grants[\"alloc\"] = min_grant_base + raw_alloc\n\n        sa_grants[\"delta\"] = (\n            (sa_grants[\"alloc\"] - sa_grants[f\"Grant_base_{year-1}\"])\n            / sa_grants[f\"Grant_base_{year-1}\"]\n            * 100\n        )\n\n        non_min_sa = sa_grants[\n            sa_grants[\"deficit\"]\n        ]  # [[\"LGA\", f\"Funding Gap_{year}\", f\"grant_{year-1}\", \"alloc\"]]\n\n        sa_grants.combine_first(correct_delta_sa(non_min_sa, year, base=True))\n\n        sa_grants[f\"Grant_base_{year}\"] = sa_grants[\"alloc\"]\n\n    south_australia_master_sim = pd.concat([south_australia_master_sim, sa_grants])\n\n\nSouth Australia OLG has a cap/collar of [-15%, 30%] for councils.\n\n\nA.3.3 Western Australia\n\n\nShow the code\ndef correct_delta_wa(sub_wa, year, base=False):\n\n    total_funding_gap = (sub_wa[f\"Funding Gap_{year}\"] * sub_wa[\"deficit\"]).sum()\n    total_funding = sub_wa[\"alloc\"].sum()\n\n    comparison_column = \"Grant_base_\" if base else \"Grant_\"\n\n    while np.any((sub_wa[\"delta\"].round(2) &lt; -60)):\n        sub_wa[\"g\"] = sub_wa[\"delta\"].apply(\n            lambda x: (x - (-60)) / 100 if x &lt; -60 else 0\n        )\n\n        sub_wa[\"alloc\"] -= sub_wa[\"g\"] * sub_wa[f\"{comparison_column}{year-1}\"]\n\n        remainder = total_funding - sub_wa[\"alloc\"].sum()\n\n        sub_wa[\"alloc\"] += sub_wa[f\"Funding Gap_{year}\"] * remainder / total_funding_gap\n\n        sub_wa[\"delta\"] = (\n            (sub_wa[\"alloc\"] - sub_wa[f\"{comparison_column}{year-1}\"])\n            / sub_wa[f\"{comparison_column}{year-1}\"]\n            * 100\n        )\n    return sub_wa\n\n\n\n\nShow the code\nwa_grants_base = pd.read_excel(\n    \"./Data/FA Grants Tables - Python.xlsx\", sheet_name=\"Western Australia\"\n)\n\nwa_grants_base[\"ERP_2025\"] = (\n    wa_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"WA\"][2025]\n    / wa_grants_base[\"ERP_2024\"].sum()\n)\nwa_grants_base[\"ERP_2025\"] = wa_grants_base[\"ERP_2025\"].round(0)\n\nwa_grants_base[\"ERP_2026\"] = (\n    wa_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"WA\"][2026]\n    / wa_grants_base[\"ERP_2024\"].sum()\n)\nwa_grants_base[\"ERP_2026\"] = wa_grants_base[\"ERP_2026\"].round(0)\n\nwa_grants_base[\"ERP_2027\"] = (\n    wa_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"WA\"][2027]\n    / wa_grants_base[\"ERP_2024\"].sum()\n)\nwa_grants_base[\"ERP_2027\"] = wa_grants_base[\"ERP_2027\"].round(0)\n\nwa_grants_base[\"ERP_2028\"] = (\n    wa_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"WA\"][2028]\n    / wa_grants_base[\"ERP_2024\"].sum()\n)\nwa_grants_base[\"ERP_2028\"] = wa_grants_base[\"ERP_2028\"].round(0)\n\nwa_grants_base[\"Grant_base_2024\"] = wa_grants_base[\"Grant_2024\"]\n\nwestern_australia_master_sim = pd.DataFrame()\n\nfor i in range(1000):\n    wa_grants = wa_grants_base.copy()\n\n    wa_grants[\"UID\"] = wa_grants[\"LGA\"].str.replace(\" \", \"\").replace(\"-\", \"\") + str(\n        i + 1\n    )\n\n    for year in range(2025, 2029):\n        prev_year = year - 1\n\n        min_per_capita_grant = (\n            budget_grants[\"WA\"][f\"{year}-{(year+1)%1000}\"]\n            / wa_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum\n        )\n\n        min_grant = wa_grants[f\"ERP_{year}\"] * min_per_capita_grant\n\n        min_per_capita_grant_base = (\n            budget_grants[\"WA\"][f\"{year}-{(year+1)%1000}\"]\n            / wa_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum_base\n        )\n\n        min_grant_base = wa_grants[f\"ERP_{year}\"] * min_per_capita_grant_base\n\n        wa_grants[f\"Funding Gap_{year}\"] = wa_grants[\n            f\"Funding Gap_{year-1}\"\n        ] * np.random.normal(1, 0.1, size=wa_grants.shape[0])\n\n        wa_grants[\"deficit\"] = wa_grants[f\"Funding Gap_{year}\"] &gt; 0\n\n        total_deficit = (wa_grants[f\"Funding Gap_{year}\"] * wa_grants[\"deficit\"]).sum()\n\n        # New case\n\n        raw_alloc = (\n            wa_grants[f\"Funding Gap_{year}\"] * wa_grants[\"deficit\"] / total_deficit\n        ) * (budget_grants[\"WA\"][f\"{year}-{(year+1)%1000}\"] - min_grant.sum())\n\n        wa_grants[\"alloc\"] = min_grant + raw_alloc\n\n        wa_grants[\"delta\"] = (\n            (wa_grants[\"alloc\"] - wa_grants[f\"Grant_{year-1}\"])\n            / wa_grants[f\"Grant_{year-1}\"]\n            * 100\n        )\n\n        non_min_wa = wa_grants[\n            wa_grants[\"deficit\"]\n        ]  # [[\"LGA\", f\"Funding Gap_{year}\", f\"grant_{year-1}\", \"alloc\"]]\n\n        wa_grants.combine_first(correct_delta_wa(non_min_wa, year))\n\n        wa_grants[f\"Grant_{year}\"] = wa_grants[\"alloc\"]\n\n        # Base case\n\n        raw_alloc = (\n            wa_grants[f\"Funding Gap_{year}\"] * wa_grants[\"deficit\"] / total_deficit\n        ) * (budget_grants[\"WA\"][f\"{year}-{(year+1)%1000}\"] - min_grant_base.sum())\n\n        wa_grants[\"alloc\"] = min_grant_base + raw_alloc\n\n        wa_grants[\"delta\"] = (\n            (wa_grants[\"alloc\"] - wa_grants[f\"Grant_base_{year-1}\"])\n            / wa_grants[f\"Grant_base_{year-1}\"]\n            * 100\n        )\n\n        non_min_wa = wa_grants[\n            wa_grants[\"deficit\"]\n        ]  # [[\"LGA\", f\"Funding Gap_{year}\", f\"grant_{year-1}\", \"alloc\"]]\n\n        wa_grants.combine_first(correct_delta_wa(non_min_wa, year, base=True))\n\n        wa_grants[f\"Grant_base_{year}\"] = wa_grants[\"alloc\"]\n\n    western_australia_master_sim = pd.concat([western_australia_master_sim, wa_grants])\n\n\nWA State Grants Commission has no ceiling on change, but claims to limit year on year decrease. No explicit floor is given, but the biggest 2023-24 to 2024-25 decrease was about -60%. So, that’s the floor we’ll use.\n\n\nA.3.4 Tasmania\n\n\nShow the code\ndef correct_delta_tas(sub_tas, year, base=False):\n\n    total_funding_gap = (sub_tas[f\"Funding Gap_{year}\"] * sub_tas[\"deficit\"]).sum()\n    total_funding = sub_tas[\"alloc\"].sum()\n\n    comparison_column = \"Grant_base_\" if base else \"Grant_\"\n\n    while np.any((sub_tas[\"delta\"].round(2) &lt; -5) | (sub_tas[\"delta\"].round(2) &gt; 10)):\n        sub_tas[\"g\"] = sub_tas[\"delta\"].apply(\n            lambda x: (x - (-5)) / 100 if x &lt; -5 else ((x - 10) / 100 if x &gt; 10 else 0)\n        )\n\n        sub_tas[\"alloc\"] -= sub_tas[\"g\"] * sub_tas[f\"{comparison_column}{year-1}\"]\n\n        remainder = total_funding - sub_tas[\"alloc\"].sum()\n\n        sub_tas[\"alloc\"] += (\n            sub_tas[f\"Funding Gap_{year}\"] * remainder / total_funding_gap\n        )\n\n        delta_new = (\n            (sub_tas[\"alloc\"] - sub_tas[f\"{comparison_column}{year-1}\"])\n            / sub_tas[f\"{comparison_column}{year-1}\"]\n            * 100\n        )\n\n        if delta_new.round(3).equals(sub_tas[\"delta\"].round(3)):\n            sub_tas[\"delta\"] = delta_new\n            break\n\n        sub_tas[\"delta\"] = delta_new\n\n    return sub_tas\n\n\n\n\nShow the code\ntas_grants_base = pd.read_excel(\n    \"./Data/FA Grants Tables - Python.xlsx\", sheet_name=\"Tasmania\"\n)\n\ntas_grants_base[\"ERP_2025\"] = (\n    tas_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"TAS\"][2025]\n    / tas_grants_base[\"ERP_2024\"].sum()\n)\ntas_grants_base[\"ERP_2025\"] = tas_grants_base[\"ERP_2025\"].round(0)\n\ntas_grants_base[\"ERP_2026\"] = (\n    tas_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"TAS\"][2026]\n    / tas_grants_base[\"ERP_2024\"].sum()\n)\ntas_grants_base[\"ERP_2026\"] = tas_grants_base[\"ERP_2026\"].round(0)\n\ntas_grants_base[\"ERP_2027\"] = (\n    tas_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"TAS\"][2027]\n    / tas_grants_base[\"ERP_2024\"].sum()\n)\ntas_grants_base[\"ERP_2027\"] = tas_grants_base[\"ERP_2027\"].round(0)\n\ntas_grants_base[\"ERP_2028\"] = (\n    tas_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"TAS\"][2028]\n    / tas_grants_base[\"ERP_2024\"].sum()\n)\ntas_grants_base[\"ERP_2028\"] = tas_grants_base[\"ERP_2028\"].round(0)\n\ntas_grants_base[\"Grant_base_2024\"] = tas_grants_base[\"Grant_2024\"]\n\ntasmania_master_sim = pd.DataFrame()\n\nfor i in range(1000):\n    tas_grants = tas_grants_base.copy()\n\n    tas_grants[\"UID\"] = tas_grants[\"LGA\"].str.replace(\" \", \"\").replace(\"-\", \"\") + str(\n        i + 1\n    )\n\n    for year in range(2025, 2029):\n        prev_year = year - 1\n\n        min_per_capita_grant = (\n            budget_grants[\"TAS\"][f\"{year}-{(year+1)%1000}\"]\n            / tas_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum\n        )\n\n        min_grant = tas_grants[f\"ERP_{year}\"] * min_per_capita_grant\n\n        min_per_capita_grant_base = (\n            budget_grants[\"TAS\"][f\"{year}-{(year+1)%1000}\"]\n            / tas_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum_base\n        )\n\n        min_grant_base = tas_grants[f\"ERP_{year}\"] * min_per_capita_grant_base\n\n        tas_grants[f\"Funding Gap_{year}\"] = tas_grants[\n            f\"Funding Gap_{year-1}\"\n        ] * np.random.normal(1, 0.1, size=tas_grants.shape[0])\n\n        tas_grants[\"deficit\"] = tas_grants[f\"Funding Gap_{year}\"] &gt; 0\n\n        total_deficit = (\n            tas_grants[f\"Funding Gap_{year}\"] * tas_grants[\"deficit\"]\n        ).sum()\n\n        # New case\n\n        raw_alloc = (\n            tas_grants[f\"Funding Gap_{year}\"] * tas_grants[\"deficit\"] / total_deficit\n        ) * (budget_grants[\"TAS\"][f\"{year}-{(year+1)%1000}\"] - min_grant.sum())\n\n        tas_grants[\"alloc\"] = min_grant + raw_alloc\n\n        tas_grants[\"delta\"] = (\n            (tas_grants[\"alloc\"] - tas_grants[f\"Grant_{year-1}\"])\n            / tas_grants[f\"Grant_{year-1}\"]\n            * 100\n        )\n\n        non_min_tas = tas_grants[\n            tas_grants[\"deficit\"]\n        ]  # [[\"LGA\", f\"Funding Gap_{year}\", f\"grant_{year-1}\", \"alloc\"]]\n\n        tas_grants.combine_first(correct_delta_tas(non_min_tas, year))\n\n        tas_grants[f\"Grant_{year}\"] = tas_grants[\"alloc\"]\n\n        # Base case\n\n        raw_alloc = (\n            tas_grants[f\"Funding Gap_{year}\"] * tas_grants[\"deficit\"] / total_deficit\n        ) * (budget_grants[\"TAS\"][f\"{year}-{(year+1)%1000}\"] - min_grant_base.sum())\n\n        tas_grants[\"alloc\"] = min_grant_base + raw_alloc\n\n        tas_grants[\"delta\"] = (\n            (tas_grants[\"alloc\"] - tas_grants[f\"Grant_base_{year-1}\"])\n            / tas_grants[f\"Grant_base_{year-1}\"]\n            * 100\n        )\n\n        non_min_tas = tas_grants[\n            tas_grants[\"deficit\"]\n        ]  # [[\"LGA\", f\"Funding Gap_{year}\", f\"grant_{year-1}\", \"alloc\"]]\n\n        tas_grants.combine_first(correct_delta_tas(non_min_tas, year, base=True))\n\n        tas_grants[f\"Grant_base_{year}\"] = tas_grants[\"alloc\"]\n\n    tasmania_master_sim = pd.concat([tasmania_master_sim, tas_grants])\n\n\nTasmania State Grants Commission has a cap/collar of [-5%, 10%] for all councils.\n\n\nA.3.5 Northern Territory\n\n\nShow the code\ndef correct_delta_nt(sub_nt, year, base=False):\n\n    total_funding_gap = (sub_nt[f\"Funding Gap_{year}\"] * sub_nt[\"deficit\"]).sum()\n    total_funding = sub_nt[\"alloc\"].sum()\n\n    comparison_column = \"Grant_base_\" if base else \"Grant_\"\n\n    while np.any((sub_nt[\"delta\"].round(2) &lt; -5)):\n        sub_nt[\"g\"] = sub_nt[\"delta\"].apply(lambda x: (x - (-5)) / 100 if x &lt; -5 else 0)\n\n        sub_nt[\"alloc\"] -= sub_nt[\"g\"] * sub_nt[f\"{comparison_column}{year-1}\"]\n\n        remainder = total_funding - sub_nt[\"alloc\"].sum()\n\n        sub_nt[\"alloc\"] += sub_nt[f\"Funding Gap_{year}\"] * remainder / total_funding_gap\n\n        sub_nt[\"delta\"] = (\n            (sub_nt[\"alloc\"] - sub_nt[f\"{comparison_column}{year-1}\"])\n            / sub_nt[f\"{comparison_column}{year-1}\"]\n            * 100\n        )\n    return sub_nt\n\n\n\n\nShow the code\nnt_grants_base = pd.read_excel(\n    \"./Data/FA Grants Tables - Python.xlsx\", sheet_name=\"Northern Territory\"\n)\n\nnt_grants_base[\"ERP_2025\"] = (\n    nt_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"NT\"][2025]\n    / nt_grants_base[\"ERP_2024\"].sum()\n)\nnt_grants_base[\"ERP_2025\"] = nt_grants_base[\"ERP_2025\"].round(0)\n\nnt_grants_base[\"ERP_2026\"] = (\n    nt_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"NT\"][2026]\n    / nt_grants_base[\"ERP_2024\"].sum()\n)\nnt_grants_base[\"ERP_2026\"] = nt_grants_base[\"ERP_2026\"].round(0)\n\nnt_grants_base[\"ERP_2027\"] = (\n    nt_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"NT\"][2027]\n    / nt_grants_base[\"ERP_2024\"].sum()\n)\nnt_grants_base[\"ERP_2027\"] = nt_grants_base[\"ERP_2027\"].round(0)\n\nnt_grants_base[\"ERP_2028\"] = (\n    nt_grants_base[\"ERP_2024\"]\n    * pop_30_jun[\"NT\"][2028]\n    / nt_grants_base[\"ERP_2024\"].sum()\n)\nnt_grants_base[\"ERP_2028\"] = nt_grants_base[\"ERP_2028\"].round(0)\n\nnt_grants_base[\"Grant_base_2024\"] = nt_grants_base[\"Grant_2024\"]\n\nnorthern_territory_master_sim = pd.DataFrame()\n\nfor i in range(1000):\n    nt_grants = nt_grants_base.copy()\n\n    nt_grants[\"UID\"] = nt_grants[\"LGA\"].str.replace(\" \", \"\").replace(\"-\", \"\") + str(\n        i + 1\n    )\n\n    for year in range(2025, 2029):\n        prev_year = year - 1\n\n        min_per_capita_grant = (\n            budget_grants[\"NT\"][f\"{year}-{(year+1)%1000}\"]\n            / nt_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum\n        )\n\n        min_grant = nt_grants[f\"ERP_{year}\"] * min_per_capita_grant\n\n        min_per_capita_grant_base = (\n            budget_grants[\"NT\"][f\"{year}-{(year+1)%1000}\"]\n            / nt_grants[f\"ERP_{year}\"].sum()\n            * per_capita_minimum_base\n        )\n\n        min_grant_base = nt_grants[f\"ERP_{year}\"] * min_per_capita_grant_base\n\n        nt_grants[f\"Funding Gap_{year}\"] = nt_grants[\n            f\"Funding Gap_{year-1}\"\n        ] * np.random.normal(1, 0.1, size=nt_grants.shape[0])\n\n        nt_grants[\"deficit\"] = nt_grants[f\"Funding Gap_{year}\"] &gt; 0\n\n        total_deficit = (nt_grants[f\"Funding Gap_{year}\"] * nt_grants[\"deficit\"]).sum()\n\n        # New case\n\n        raw_alloc = (\n            nt_grants[f\"Funding Gap_{year}\"] * nt_grants[\"deficit\"] / total_deficit\n        ) * (budget_grants[\"NT\"][f\"{year}-{(year+1)%1000}\"] - min_grant.sum())\n\n        nt_grants[\"alloc\"] = min_grant + raw_alloc\n\n        nt_grants[\"delta\"] = (\n            (nt_grants[\"alloc\"] - nt_grants[f\"Grant_{year-1}\"])\n            / nt_grants[f\"Grant_{year-1}\"]\n            * 100\n        )\n\n        non_min_nt = nt_grants[\n            nt_grants[\"deficit\"]\n        ]  # [[\"LGA\", f\"Funding Gap_{year}\", f\"grant_{year-1}\", \"alloc\"]]\n\n        nt_grants.combine_first(correct_delta_nt(non_min_nt, year))\n\n        nt_grants[f\"Grant_{year}\"] = nt_grants[\"alloc\"]\n\n        # Base case\n\n        raw_alloc = (\n            nt_grants[f\"Funding Gap_{year}\"] * nt_grants[\"deficit\"] / total_deficit\n        ) * (budget_grants[\"NT\"][f\"{year}-{(year+1)%1000}\"] - min_grant_base.sum())\n\n        nt_grants[\"alloc\"] = min_grant_base + raw_alloc\n\n        nt_grants[\"delta\"] = (\n            (nt_grants[\"alloc\"] - nt_grants[f\"Grant_base_{year-1}\"])\n            / nt_grants[f\"Grant_base_{year-1}\"]\n            * 100\n        )\n\n        non_min_nt = nt_grants[\n            nt_grants[\"deficit\"]\n        ]  # [[\"LGA\", f\"Funding Gap_{year}\", f\"grant_{year-1}\", \"alloc\"]]\n\n        nt_grants.combine_first(correct_delta_nt(non_min_nt, year, base=True))\n\n        nt_grants[f\"Grant_base_{year}\"] = nt_grants[\"alloc\"]\n\n    northern_territory_master_sim = pd.concat(\n        [northern_territory_master_sim, nt_grants]\n    )\n\n\nNorthern Territory has a collar of -5% for all councils.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Methodology: Grants Simulation</span>"
    ]
  },
  {
    "objectID": "20_perc_min_grant_agg.html",
    "href": "20_perc_min_grant_agg.html",
    "title": "Appendix B — A 20% Per Capita Minimum Grant - Gains and Losses",
    "section": "",
    "text": "B.1 A State and Territory breakdown\nShow the code\nsim_grants_grouped = (\n    sim_grants.groupby([\"Jurisdiction\", \"ACLG\", \"Sim_i\"])\n    .apply(weighted_group_delta, include_groups=False)\n    .reset_index()\n)\n\nsim_grants_melted = pd.melt(\n    sim_grants_grouped,\n    id_vars=[\"Jurisdiction\", \"ACLG\", \"Sim_i\"],\n    value_vars=[f\"Grant Delta_{year}\" for year in range(2025, 2029)],\n    var_name=\"Year\",\n    value_name=\"Expected Change in GPG ($)\",\n)\n\nsim_grants_melted[\"Year\"] = sim_grants_melted[\"Year\"].str.split(\"_\").str[1].astype(int)\nsim_grants_melted[\"State-ACLG\"] = (\n    sim_grants_melted[\"Jurisdiction\"] + \" - \" + sim_grants_melted[\"ACLG\"]\n)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A 20% Per Capita Minimum Grant - Gains and Losses</span>"
    ]
  },
  {
    "objectID": "20_perc_min_grant_agg.html#a-state-and-territory-breakdown",
    "href": "20_perc_min_grant_agg.html#a-state-and-territory-breakdown",
    "title": "Appendix B — A 20% Per Capita Minimum Grant - Gains and Losses",
    "section": "",
    "text": "B.1.1 New South Wales\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"New South Wales\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nB.1.2 Victoria\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Victoria\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nB.1.3 Queensland\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Queensland\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nB.1.4 South Austrlalia\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"South Australia\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nB.1.5 Western Australia\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Western Australia\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nB.1.6 Tasmania\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Tasmania\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nB.1.7 Northern Territory\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Northern Territory\"])",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A 20% Per Capita Minimum Grant - Gains and Losses</span>"
    ]
  },
  {
    "objectID": "20_perc_min_grant.html",
    "href": "20_perc_min_grant.html",
    "title": "Appendix C — A 20% Per Capita Minimum Grant - A per capita study",
    "section": "",
    "text": "C.1 A State and Territory breakdown\nShow the code\nsim_grants_grouped = (\n    sim_grants.groupby([\"Jurisdiction\", \"ACLG\", \"Sim_i\"])\n    .apply(weighted_group_delta, include_groups=False)\n    .reset_index()\n)\n\nfor year in range(2025, 2029):\n    sim_grants_grouped[f\"Grant Delta Per Capita_{year}\"] = sim_grants_grouped[f\"Grant Delta_{year}\"]/ sim_grants_grouped[f\"Population_{year}\"]\n\nsim_grants_melted = pd.melt(\n    sim_grants_grouped,\n    id_vars=[\"Jurisdiction\", \"ACLG\", \"Sim_i\"],\n    value_vars=[f\"Grant Delta Per Capita_{year}\" for year in range(2025, 2029)],\n    var_name=\"Year\",\n    value_name=\"Expected Change in GPG Per Capita($)\",\n)\n\nsim_grants_melted[\"Year\"] = sim_grants_melted[\"Year\"].str.split(\"_\").str[1].astype(int)\nsim_grants_melted[\"State-ACLG\"] = (\n    sim_grants_melted[\"Jurisdiction\"] + \" - \" + sim_grants_melted[\"ACLG\"]\n)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>A 20% Per Capita Minimum Grant - A per capita study</span>"
    ]
  },
  {
    "objectID": "20_perc_min_grant.html#a-state-and-territory-breakdown",
    "href": "20_perc_min_grant.html#a-state-and-territory-breakdown",
    "title": "Appendix C — A 20% Per Capita Minimum Grant - A per capita study",
    "section": "",
    "text": "C.1.1 New South Wales\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"New South Wales\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC.1.2 Victoria\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Victoria\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC.1.3 Queensland\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Queensland\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC.1.4 South Austrlalia\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"South Australia\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC.1.5 Western Australia\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Western Australia\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC.1.6 Tasmania\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Tasmania\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC.1.7 Northern Territory\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Northern Territory\"])",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>A 20% Per Capita Minimum Grant - A per capita study</span>"
    ]
  },
  {
    "objectID": "10_perc_min_grant_agg.html",
    "href": "10_perc_min_grant_agg.html",
    "title": "Appendix D — A 10% Per Capita Minimum Grant - Gains and Losses",
    "section": "",
    "text": "D.1 A State and Territory breakdown\nShow the code\nsim_grants_grouped = (\n    sim_grants.groupby([\"Jurisdiction\", \"ACLG\", \"Sim_i\"])\n    .apply(weighted_group_delta, include_groups=False)\n    .reset_index()\n)\n\nsim_grants_melted = pd.melt(\n    sim_grants_grouped,\n    id_vars=[\"Jurisdiction\", \"ACLG\", \"Sim_i\"],\n    value_vars=[f\"Grant Delta_{year}\" for year in range(2025, 2029)],\n    var_name=\"Year\",\n    value_name=\"Expected Change in GPG ($)\",\n)\n\nsim_grants_melted[\"Year\"] = sim_grants_melted[\"Year\"].str.split(\"_\").str[1].astype(int)\nsim_grants_melted[\"State-ACLG\"] = (\n    sim_grants_melted[\"Jurisdiction\"] + \" - \" + sim_grants_melted[\"ACLG\"]\n)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>A 10% Per Capita Minimum Grant - Gains and Losses</span>"
    ]
  },
  {
    "objectID": "10_perc_min_grant_agg.html#a-state-and-territory-breakdown",
    "href": "10_perc_min_grant_agg.html#a-state-and-territory-breakdown",
    "title": "Appendix D — A 10% Per Capita Minimum Grant - Gains and Losses",
    "section": "",
    "text": "D.1.1 New South Wales\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"New South Wales\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD.1.2 Victoria\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Victoria\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD.1.3 Queensland\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Queensland\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD.1.4 South Austrlalia\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"South Australia\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD.1.5 Western Australia\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Western Australia\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD.1.6 Tasmania\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Tasmania\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD.1.7 Northern Territory\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Northern Territory\"])",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>A 10% Per Capita Minimum Grant - Gains and Losses</span>"
    ]
  },
  {
    "objectID": "10_perc_min_grant.html",
    "href": "10_perc_min_grant.html",
    "title": "Appendix E — A 10% Per Capita Minimum Grant - A per capita study",
    "section": "",
    "text": "E.1 A State and Territory breakdown\nShow the code\nsim_grants_grouped = (\n    sim_grants.groupby([\"Jurisdiction\", \"ACLG\", \"Sim_i\"])\n    .apply(weighted_group_delta, include_groups=False)\n    .reset_index()\n)\n\nfor year in range(2025, 2029):\n    sim_grants_grouped[f\"Grant Delta Per Capita_{year}\"] = sim_grants_grouped[f\"Grant Delta_{year}\"]/ sim_grants_grouped[f\"Population_{year}\"]\n\nsim_grants_melted = pd.melt(\n    sim_grants_grouped,\n    id_vars=[\"Jurisdiction\", \"ACLG\", \"Sim_i\"],\n    value_vars=[f\"Grant Delta Per Capita_{year}\" for year in range(2025, 2029)],\n    var_name=\"Year\",\n    value_name=\"Expected Change in GPG Per Capita($)\",\n)\n\nsim_grants_melted[\"Year\"] = sim_grants_melted[\"Year\"].str.split(\"_\").str[1].astype(int)\nsim_grants_melted[\"State-ACLG\"] = (\n    sim_grants_melted[\"Jurisdiction\"] + \" - \" + sim_grants_melted[\"ACLG\"]\n)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>A 10% Per Capita Minimum Grant - A per capita study</span>"
    ]
  },
  {
    "objectID": "10_perc_min_grant.html#a-state-and-territory-breakdown",
    "href": "10_perc_min_grant.html#a-state-and-territory-breakdown",
    "title": "Appendix E — A 10% Per Capita Minimum Grant - A per capita study",
    "section": "",
    "text": "E.1.1 New South Wales\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"New South Wales\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nE.1.2 Victoria\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Victoria\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nE.1.3 Queensland\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Queensland\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nE.1.4 South Austrlalia\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"South Australia\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nE.1.5 Western Australia\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Western Australia\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nE.1.6 Tasmania\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Tasmania\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nE.1.7 Northern Territory\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Northern Territory\"])",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>A 10% Per Capita Minimum Grant - A per capita study</span>"
    ]
  },
  {
    "objectID": "no_min_grant.html",
    "href": "no_min_grant.html",
    "title": "Appendix G — A World With No Per Capita Minimum Grant - A per capita study",
    "section": "",
    "text": "G.1 A State and Territory breakdown\nShow the code\nsim_grants_grouped = (\n    sim_grants.groupby([\"Jurisdiction\", \"ACLG\", \"Sim_i\"])\n    .apply(weighted_group_delta, include_groups=False)\n    .reset_index()\n)\n\nfor year in range(2025, 2029):\n    sim_grants_grouped[f\"Grant Delta Per Capita_{year}\"] = sim_grants_grouped[f\"Grant Delta_{year}\"]/ sim_grants_grouped[f\"Population_{year}\"]\n\nsim_grants_melted = pd.melt(\n    sim_grants_grouped,\n    id_vars=[\"Jurisdiction\", \"ACLG\", \"Sim_i\"],\n    value_vars=[f\"Grant Delta Per Capita_{year}\" for year in range(2025, 2029)],\n    var_name=\"Year\",\n    value_name=\"Expected Change in GPG Per Capita($)\",\n)\n\nsim_grants_melted[\"Year\"] = sim_grants_melted[\"Year\"].str.split(\"_\").str[1].astype(int)\nsim_grants_melted[\"State-ACLG\"] = (\n    sim_grants_melted[\"Jurisdiction\"] + \" - \" + sim_grants_melted[\"ACLG\"]\n)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>G</span>  <span class='chapter-title'>A World With No Per Capita Minimum Grant - A per capita study</span>"
    ]
  },
  {
    "objectID": "no_min_grant.html#a-state-and-territory-breakdown",
    "href": "no_min_grant.html#a-state-and-territory-breakdown",
    "title": "Appendix G — A World With No Per Capita Minimum Grant - A per capita study",
    "section": "",
    "text": "G.1.1 New South Wales\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"New South Wales\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG.1.2 Victoria\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Victoria\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG.1.3 Queensland\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Queensland\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG.1.4 South Austrlalia\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"South Australia\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG.1.5 Western Australia\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Western Australia\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG.1.6 Tasmania\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Tasmania\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG.1.7 Northern Territory\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Northern Territory\"])",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>G</span>  <span class='chapter-title'>A World With No Per Capita Minimum Grant - A per capita study</span>"
    ]
  },
  {
    "objectID": "no_min_grant_agg.html",
    "href": "no_min_grant_agg.html",
    "title": "Appendix F — A World With No Per Capita Minimum Grant - Gains and Losses",
    "section": "",
    "text": "F.1 A State and Territory breakdown\nShow the code\nsim_grants_grouped = (\n    sim_grants.groupby([\"Jurisdiction\", \"ACLG\", \"Sim_i\"])\n    .apply(weighted_group_delta, include_groups=False)\n    .reset_index()\n)\n\nsim_grants_melted = pd.melt(\n    sim_grants_grouped,\n    id_vars=[\"Jurisdiction\", \"ACLG\", \"Sim_i\"],\n    value_vars=[f\"Grant Delta_{year}\" for year in range(2025, 2029)],\n    var_name=\"Year\",\n    value_name=\"Expected Change in GPG ($)\",\n)\n\nsim_grants_melted[\"Year\"] = sim_grants_melted[\"Year\"].str.split(\"_\").str[1].astype(int)\nsim_grants_melted[\"State-ACLG\"] = (\n    sim_grants_melted[\"Jurisdiction\"] + \" - \" + sim_grants_melted[\"ACLG\"]\n)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>F</span>  <span class='chapter-title'>A World With No Per Capita Minimum Grant - Gains and Losses</span>"
    ]
  },
  {
    "objectID": "no_min_grant_agg.html#a-state-and-territory-breakdown",
    "href": "no_min_grant_agg.html#a-state-and-territory-breakdown",
    "title": "Appendix F — A World With No Per Capita Minimum Grant - Gains and Losses",
    "section": "",
    "text": "F.1.1 New South Wales\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"New South Wales\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nF.1.2 Victoria\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Victoria\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nF.1.3 Queensland\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Queensland\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nF.1.4 South Austrlalia\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"South Australia\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nF.1.5 Western Australia\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Western Australia\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nF.1.6 Tasmania\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Tasmania\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nF.1.7 Northern Territory\n\n\nShow the code\ngrants_plot(sim_grants_melted[sim_grants_melted[\"Jurisdiction\"] == \"Northern Territory\"])",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>F</span>  <span class='chapter-title'>A World With No Per Capita Minimum Grant - Gains and Losses</span>"
    ]
  },
  {
    "objectID": "aclg_note.html",
    "href": "aclg_note.html",
    "title": "Appendix H — A note on the Australian Classification of Local Government",
    "section": "",
    "text": "Step 1\nStep 2\nStep 3\n\nCategory\nAlpha\n\n\n\n\nURBAN (U)\n\n\n\n\n\n\n\n\nCapital City (CC)\nNot applicable\n\n1\nUCC\n\n\nPop. &gt; 20,000\nMetropolitan Developed (D) - Part of an urban centre &gt; 1,000,000 and pop. density &gt; 600/sq km.\nSmall (S)\nup to 30,000\n2\nUDS\n\n\n\n\nMedium (M)\n30,001-70,000\n3\nUDM\n\n\n\n\nLarge (L)\n70,001-120,000\n4\nUDL\n\n\n\n\nVery large (VL)\n&gt; 120,000\n5\nUDV\n\n\nPop. Density &gt; 30 persons per sq km\nRegional Town/City (R) - Part of an urban centre with population &lt;1,000,000 and predominantly urban in nature\nSmall\nup to 30,000\n6\nURS\n\n\n\n\nMedium\n30,001-70,000\n7\nURM\n\n\n\n\nLarge\n70,001-120,000\n8\nURL\n\n\n\n\nVery large\n&gt;120,001\n9\nURV\n\n\n&gt;90% of LGA population is urban\nFringe (F) - A developing LGA on the margin of a developed or regional urban centre.\nSmall\nup to 30,000\n10\nUFS\n\n\n\n\nMedium\n30,001-70,000\n11\nUFM\n\n\n\n\nLarge\n70,001-120,000\n12\nUFL\n\n\n\n\nVery large\n&gt;120,001\n13\nUFV\n\n\nRURAL (R)\n\n\n\n\n\n\n\n\nSignificant Growth (SG) - Average annual Population growth &gt; 3%, population &gt; 5,000 and not remote.\nNot applicable\n\n14\nRSG\n\n\n\nAgricultural (A)\nSmall\nUp to 2,000\n15\nRAS\n\n\n\n\nMedium\n2,001-5,000\n16\nRAM\n\n\n\n\nLarge\n5,001,-10,000\n17\nRAL\n\n\n\n\nVery large\n10,001 to 20,000\n18\nRAV\n\n\n\nRemote (T) - Situated in a remote locality.\nExtra small\nUp to 400\n19\nRTX\n\n\n\n\nSmall\n401-1,000\n20\nRTS\n\n\n\n\nMedium\n1,001–3,000\n21\nRTM\n\n\n\n\nLarge\n3,001 to 20,000\n22\nRTL",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>H</span>  <span class='chapter-title'>A note on the Australian Classification of Local Government</span>"
    ]
  }
]